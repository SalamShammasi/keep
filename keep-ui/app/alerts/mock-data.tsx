import { Alert, Severity } from "./models";

export const mockAlerts: Alert[] = [
  {
    id: "1",
    name: "CPU usage",
    severity: "critical" as Severity,
    status: "active",
    lastReceived: new Date(),
    environment: "production",
    isDuplicate: true,
    service: "backend",
    source: ["datadog"],
    message: "CPU usage is above 90%",
    description:
      "The CPU usage on server-1 is above 90% and requires attention",
    fatigueMeter: Math.floor(Math.random() * 100),
    pushed: false,
  },
  {
    id: "2",
    name: "Memory usage",
    severity: "high" as Severity,
    status: "active",
    lastReceived: new Date(),
    environment: "staging",
    isDuplicate: false,
    service: "frontend",
    source: ["elastic", "datadog"],
    message: "Memory usage is above 80%",
    description:
      "The memory usage on client-1 is above 80% and requires attention",
    fatigueMeter: Math.floor(Math.random() * 100),
    pushed: true,
  },
  {
    id: "3",
    name: "Disk space",
    severity: "medium" as Severity,
    status: "resolved",
    lastReceived: new Date(),
    environment: "development",
    isDuplicate: true,
    service: "database",
    source: ["grafana", "snowflake"],
    message: "Disk space is running low",
    description: "The disk space on db-1 is running low and requires attention",
    fatigueMeter: Math.floor(Math.random() * 100),
    pushed: false,
  },
  {
    id: "4",
    name: "Network latency",
    severity: "medium" as Severity,
    status: "active",
    lastReceived: new Date(),
    environment: "production",
    isDuplicate: false,
    service: "backend",
    source: ["datadog"],
    message: "Network latency is above threshold",
    description:
      "The network latency on server-2 is above the threshold and requires attention",
    fatigueMeter: Math.floor(Math.random() * 100),
    pushed: true,
  },
  {
    id: "5",
    name: "Disk I/O",
    severity: "low" as Severity,
    status: "active",
    lastReceived: new Date(),
    environment: "staging",
    isDuplicate: true,
    duplicateReason: "Alert triggered multiple times",
    service: "frontend",
    source: ["pagerduty"],
    message: "Disk I/O is above average",
    description:
      "The disk I/O on client-2 is above average and requires attention",
    fatigueMeter: Math.floor(Math.random() * 100),
    pushed: false,
  },
  {
    id: "6",
    name: "Database connection",
    severity: "low" as Severity,
    status: "resolved",
    lastReceived: new Date(),
    environment: "development",
    isDuplicate: false,
    service: "database",
    source: ["sentry", "snowflake"],
    message: "Lost connection to the database",
    description: "The connection to db-2 was lost and has been restored",
    fatigueMeter: Math.floor(Math.random() * 100),
    pushed: true,
  },
  {
    id: "7",
    name: "Server response time",
    severity: "low" as Severity,
    status: "active",
    lastReceived: new Date(),
    environment: "production",
    isDuplicate: true,
    duplicateReason: "Triggered in both Datadog and Snowflake",
    service: "backend",
    source: ["snowflake", "datadog"],
    message: "Server response time is too slow",
    description:
      "The response time on server-3 is too slow and requires attention",
    fatigueMeter: Math.floor(Math.random() * 100),
    pushed: false,
  },
  {
    id: "8",
    name: "Cache utilization",
    status: "active",
    lastReceived: new Date(),
    environment: "staging",
    isDuplicate: false,
    service: "frontend",
    source: ["elastic", "datadog", "sentry"],
    message: "Cache utilization is below threshold",
    description:
      "The cache utilization on client-3 is below the threshold and requires attention",
    fatigueMeter: Math.floor(Math.random() * 100),
    pushed: true,
  },
];
